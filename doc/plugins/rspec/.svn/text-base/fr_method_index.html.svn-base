
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<!--

    Methods

  -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>Methods</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <link rel="stylesheet" href="rdoc-style.css" type="text/css" />
  <base target="docwin" />
</head>
<body>
<div id="index">
  <h1 class="section-bar">Methods</h1>
  <div id="index-entries">
    <a href="classes/Spec/Matchers/BaseOperatorMatcher.html#M000400">< (Spec::Matchers::BaseOperatorMatcher)</a><br />
    <a href="classes/Spec/Story/StepGroup.html#M000162"><< (Spec::Story::StepGroup)</a><br />
    <a href="classes/Spec/Matchers/BaseOperatorMatcher.html#M000401"><= (Spec::Matchers::BaseOperatorMatcher)</a><br />
    <a href="classes/Spec/Matchers/BaseOperatorMatcher.html#M000395">== (Spec::Matchers::BaseOperatorMatcher)</a><br />
    <a href="classes/Spec/Mocks/ArgumentConstraints/EqualityProxy.html#M000182">== (Spec::Mocks::ArgumentConstraints::EqualityProxy)</a><br />
    <a href="classes/Spec/Mocks/ArgumentConstraints/HashIncludingConstraint.html#M000184">== (Spec::Mocks::ArgumentConstraints::HashIncludingConstraint)</a><br />
    <a href="classes/Spec/Mocks/Mock.html#M000285">== (Spec::Mocks::Mock)</a><br />
    <a href="classes/Spec/Mocks/ArgumentConstraints/NoArgsConstraint.html#M000189">== (Spec::Mocks::ArgumentConstraints::NoArgsConstraint)</a><br />
    <a href="classes/Spec/Mocks/ArgumentConstraints/MatcherConstraint.html#M000191">== (Spec::Mocks::ArgumentConstraints::MatcherConstraint)</a><br />
    <a href="classes/Spec/Mocks/ArgumentConstraints/BooleanConstraint.html#M000194">== (Spec::Mocks::ArgumentConstraints::BooleanConstraint)</a><br />
    <a href="classes/Spec/Mocks/ArgumentConstraints/RegexpConstraint.html#M000198">== (Spec::Mocks::ArgumentConstraints::RegexpConstraint)</a><br />
    <a href="classes/Spec/Mocks/ArgumentConstraints/DuckTypeConstraint.html#M000187">== (Spec::Mocks::ArgumentConstraints::DuckTypeConstraint)</a><br />
    <a href="classes/Spec/Mocks/ArgumentConstraints/AnyArgConstraint.html#M000196">== (Spec::Mocks::ArgumentConstraints::AnyArgConstraint)</a><br />
    <a href="classes/Spec/Matchers/BaseOperatorMatcher.html#M000396">=== (Spec::Matchers::BaseOperatorMatcher)</a><br />
    <a href="classes/Spec/Matchers/BaseOperatorMatcher.html#M000397">=~ (Spec::Matchers::BaseOperatorMatcher)</a><br />
    <a href="classes/Spec/Matchers/BaseOperatorMatcher.html#M000398">> (Spec::Matchers::BaseOperatorMatcher)</a><br />
    <a href="classes/Spec/Matchers/BaseOperatorMatcher.html#M000399">>= (Spec::Matchers::BaseOperatorMatcher)</a><br />
    <a href="classes/Spec/Story/World.html#M000127">And (Spec::Story::World)</a><br />
    <a href="classes/Spec/Story/World.html#M000124">Given (Spec::Story::World)</a><br />
    <a href="classes/Spec/Story/StepGroup.html#M000151">Given (Spec::Story::StepGroup)</a><br />
    <a href="classes/Spec/Story/StepGroup.html#M000150">GivenScenario (Spec::Story::StepGroup)</a><br />
    <a href="classes/Spec/Story/World.html#M000123">GivenScenario (Spec::Story::World)</a><br />
    <a href="classes/Spec/Story/Runner/ScenarioCollector.html#M000074">Scenario (Spec::Story::Runner::ScenarioCollector)</a><br />
    <a href="classes/Spec/Story/Runner/StoryRunner.html#M000086">Story (Spec::Story::Runner::StoryRunner)</a><br />
    <a href="classes/Spec/Story/Extensions/Main.html#M000020">Story (Spec::Story::Extensions::Main)</a><br />
    <a href="classes/Spec/Story/World.html#M000126">Then (Spec::Story::World)</a><br />
    <a href="classes/Spec/Story/StepGroup.html#M000153">Then (Spec::Story::StepGroup)</a><br />
    <a href="classes/Spec/Story/World.html#M000125">When (Spec::Story::World)</a><br />
    <a href="classes/Spec/Story/StepGroup.html#M000152">When (Spec::Story::StepGroup)</a><br />
    <a href="classes/Spec/Story/Story.html#M000129">[] (Spec::Story::Story)</a><br />
    <a href="classes/Spec/Story/Runner/PlainTextStoryRunner.html#M000080">[]= (Spec::Story::Runner::PlainTextStoryRunner)</a><br />
    <a href="classes/Spec/Example/ExampleMethods.html#M000332">__full_description (Spec::Example::ExampleMethods)</a><br />
    <a href="classes/Spec/Mocks/Proxy.html#M000250">act_as_null_object (Spec::Mocks::Proxy)</a><br />
    <a href="classes/Spec/Adapters/RubyEngine.html#M000408">adapter (Spec::Adapters::RubyEngine)</a><br />
    <a href="classes/Spec/Story/StepGroup.html#M000158">add (Spec::Story::StepGroup)</a><br />
    <a href="classes/Spec/Mocks/Space.html#M000274">add (Spec::Mocks::Space)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseFormatter.html#M000475">add_example_group (Spec::Runner::Formatter::BaseFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/SpecdocFormatter.html#M000469">add_example_group (Spec::Runner::Formatter::SpecdocFormatter)</a><br />
    <a href="classes/Spec/Runner/Reporter.html#M000562">add_example_group (Spec::Runner::Reporter)</a><br />
    <a href="classes/Spec/Runner/Formatter/NestedTextFormatter.html#M000516">add_example_group (Spec::Runner::Formatter::NestedTextFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/HtmlFormatter.html#M000453">add_example_group (Spec::Runner::Formatter::HtmlFormatter)</a><br />
    <a href="classes/Spec/Runner/Options.html#M000531">add_example_group (Spec::Runner::Options)</a><br />
    <a href="classes/Spec/Story/Runner/ScenarioRunner.html#M000077">add_listener (Spec::Story::Runner::ScenarioRunner)</a><br />
    <a href="classes/Spec/Story/World.html#M000113">add_listener (Spec::Story::World)</a><br />
    <a href="classes/Spec/Story/Runner/StoryRunner.html#M000088">add_listener (Spec::Story::Runner::StoryRunner)</a><br />
    <a href="classes/Spec/Mocks/Proxy.html#M000251">add_message_expectation (Spec::Mocks::Proxy)</a><br />
    <a href="classes/Spec/Mocks/Proxy.html#M000252">add_negative_message_expectation (Spec::Mocks::Proxy)</a><br />
    <a href="classes/Spec/Story/Runner/StoryMediator/Story.html#M000103">add_scenario (Spec::Story::Runner::StoryMediator::Story)</a><br />
    <a href="classes/Spec/Example/SharedExampleGroup.html#M000345">add_shared_example_group (Spec::Example::SharedExampleGroup)</a><br />
    <a href="classes/Spec/Story/Runner/StoryMediator/Scenario.html#M000109">add_step (Spec::Story::Runner::StoryMediator::Scenario)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser.html#M000032">add_story_line (Spec::Story::Runner::StoryParser)</a><br />
    <a href="classes/Spec/Mocks/Proxy.html#M000253">add_stub (Spec::Mocks::Proxy)</a><br />
    <a href="classes/Spec/Story/StepGroup.html#M000161">add_to (Spec::Story::StepGroup)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser.html#M000039">add_to_last (Spec::Story::Runner::StoryParser)</a><br />
    <a href="classes/Spec/Story/Runner/StoryMediator.html#M000099">add_to_last (Spec::Story::Runner::StoryMediator)</a><br />
    <a href="classes/Spec/Mocks/MessageExpectation.html#M000233">advise (Spec::Mocks::MessageExpectation)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000316">after (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Example/Configuration.html#M000357">after (Spec::Example::Configuration)</a><br />
    <a href="classes/Spec/Example/ExampleMethods.html#M000337">after_example (Spec::Example::ExampleMethods)</a><br />
    <a href="classes/Spec/Mocks/Proxy.html#M000247">allow_message_expectations_on_nil (Spec::Mocks::Proxy)</a><br />
    <a href="classes/Spec/Mocks/ExampleMethods.html#M000207">allow_message_expectations_on_nil (Spec::Mocks::ExampleMethods)</a><br />
    <a href="classes/Spec/Mocks/BaseExpectation.html#M000213">and_raise (Spec::Mocks::BaseExpectation)</a><br />
    <a href="classes/Spec/Mocks/BaseExpectation.html#M000212">and_return (Spec::Mocks::BaseExpectation)</a><br />
    <a href="classes/Spec/Mocks/BaseExpectation.html#M000214">and_throw (Spec::Mocks::BaseExpectation)</a><br />
    <a href="classes/Spec/Mocks/BaseExpectation.html#M000215">and_yield (Spec::Mocks::BaseExpectation)</a><br />
    <a href="classes/Spec/Mocks/ArgumentConstraints.html#M000175">any_args (Spec::Mocks::ArgumentConstraints)</a><br />
    <a href="classes/Spec/Mocks/MessageExpectation.html#M000240">any_number_of_times (Spec::Mocks::MessageExpectation)</a><br />
    <a href="classes/Spec/Mocks/ArgumentConstraints.html#M000176">anything (Spec::Mocks::ArgumentConstraints)</a><br />
    <a href="classes/Spec/Example/Configuration.html#M000358">append_after (Spec::Example::Configuration)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000317">append_after (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000313">append_before (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Example/Configuration.html#M000354">append_before (Spec::Example::Configuration)</a><br />
    <a href="classes/Regexp.html#M000003">arg_regexp (Regexp)</a><br />
    <a href="classes/String.html#M000006">arg_regexp (String)</a><br />
    <a href="classes/Object.html#M000001">args_and_options (Object)</a><br />
    <a href="classes/Spec/Mocks/ArgumentExpectation.html#M000280">args_match? (Spec::Mocks::ArgumentExpectation)</a><br />
    <a href="classes/Spec/Mocks/Methods.html#M000202">as_null_object (Spec::Mocks::Methods)</a><br />
    <a href="classes/Spec/Story/Story.html#M000131">assign_steps_to (Spec::Story::Story)</a><br />
    <a href="classes/Spec/Mocks/MessageExpectation.html#M000237">at_least (Spec::Mocks::MessageExpectation)</a><br />
    <a href="classes/Spec/Mocks/MessageExpectation.html#M000238">at_most (Spec::Mocks::MessageExpectation)</a><br />
    <a href="classes/Spec/Rake/SpecTask.html#M000609">attr_accessor (Spec::Rake::SpecTask)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseTextFormatter.html#M000501">backtrace_line (Spec::Runner::Formatter::BaseTextFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/TextMateFormatter.html#M000514">backtrace_line (Spec::Runner::Formatter::TextMateFormatter)</a><br />
    <a href="classes/Spec/Matchers.html#M000383">be (Spec::Matchers)</a><br />
    <a href="classes/Spec/Matchers.html#M000373">be_close (Spec::Matchers)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000314">before (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Example/Configuration.html#M000355">before (Spec::Example::Configuration)</a><br />
    <a href="classes/Spec/Example/ExampleMethods.html#M000336">before_example (Spec::Example::ExampleMethods)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseTextFormatter.html#M000508">blue (Spec::Runner::Formatter::BaseTextFormatter)</a><br />
    <a href="classes/Spec/Mocks/ArgumentConstraints.html#M000179">boolean (Spec::Mocks::ArgumentConstraints)</a><br />
    <a href="classes/Spec/Mocks/BaseExpectation.html#M000209">build_child (Spec::Mocks::BaseExpectation)</a><br />
    <a href="classes/Spec/Example/ModuleInclusionWarnings/MethodDispatcher.html#M000293">call (Spec::Example::ModuleInclusionWarnings::MethodDispatcher)</a><br />
    <a href="classes/Spec/Mocks/BaseExpectation.html#M000218">called_max_times? (Spec::Mocks::BaseExpectation)</a><br />
    <a href="classes/Spec/Matchers.html#M000375">change (Spec::Matchers)</a><br />
    <a href="classes/Spec/Example/ModuleReopeningFix.html#M000325">child_modules (Spec::Example::ModuleReopeningFix)</a><br />
    <a href="classes/Spec/Runner/BacktraceTweaker.html#M000597">clean_up_double_slashes (Spec::Runner::BacktraceTweaker)</a><br />
    <a href="classes/Spec/Story/StepMother.html#M000144">clear (Spec::Story::StepMother)</a><br />
    <a href="classes/Spec/Story/StepGroup.html#M000159">clear (Spec::Story::StepGroup)</a><br />
    <a href="classes/Spec/Matchers/ModuleMethods.html#M000386">clear_generated_description (Spec::Matchers::ModuleMethods)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseFormatter.html#M000484">close (Spec::Runner::Formatter::BaseFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseTextFormatter.html#M000497">close (Spec::Runner::Formatter::BaseTextFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/PlainTextFormatter.html#M000442">collected_steps (Spec::Runner::Formatter::Story::PlainTextFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/HtmlFormatter.html#M000413">collected_steps (Spec::Runner::Formatter::Story::HtmlFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseTextFormatter.html#M000502">colour (Spec::Runner::Formatter::BaseTextFormatter)</a><br />
    <a href="classes/Spec/Runner/Options.html#M000536">colour= (Spec::Runner::Options)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseTextFormatter.html#M000499">colour? (Spec::Runner::Formatter::BaseTextFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseTextFormatter.html#M000494">colourise (Spec::Runner::Formatter::BaseTextFormatter)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/State.html#M000071">comment (Spec::Story::Runner::StoryParser::State)</a><br />
    <a href="classes/Spec/Runner.html#M000409">configure (Spec::Runner)</a><br />
    <a href="classes/Spec/Runner/SpecParser.html#M000585">consider_example_for_best_match (Spec::Runner::SpecParser)</a><br />
    <a href="classes/Spec/Runner/SpecParser.html#M000584">consider_example_groups_for_best_match (Spec::Runner::SpecParser)</a><br />
    <a href="classes/Autotest/Rspec.html#M000008">consolidate_failures (Autotest::Rspec)</a><br />
    <a href="classes/Spec/Mocks/ArgumentExpectation.html#M000278">constraint_for (Spec::Mocks::ArgumentExpectation)</a><br />
    <a href="classes/Spec/Mocks/ArgumentExpectation.html#M000281">constraints_block_matches? (Spec::Mocks::ArgumentExpectation)</a><br />
    <a href="classes/Spec/Mocks/ArgumentExpectation.html#M000282">constraints_match? (Spec::Mocks::ArgumentExpectation)</a><br />
    <a href="classes/Spec/Mocks/OrderGroup.html#M000272">consume (Spec::Mocks::OrderGroup)</a><br />
    <a href="classes/Spec/Extensions/Main.html#M000016">context (Spec::Extensions::Main)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000297">context (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Expectations/Differs/Default.html#M000170">context_lines (Spec::Expectations::Differs::Default)</a><br />
    <a href="classes/Spec/Runner/Formatter/SnippetExtractor/NullConverter.html#M000468">convert (Spec::Runner::Formatter::SnippetExtractor::NullConverter)</a><br />
    <a href="classes/Spec/Story/World.html#M000111">create (Spec::Story::World)</a><br />
    <a href="classes/Spec/Example/ExampleGroupFactory.html#M000342">create_example_group (Spec::Example::ExampleGroupFactory)</a><br />
    <a href="classes/Spec/Story/Runner/StoryMediator.html#M000094">create_given (Spec::Story::Runner::StoryMediator)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser.html#M000035">create_given (Spec::Story::Runner::StoryParser)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser.html#M000036">create_given_scenario (Spec::Story::Runner::StoryParser)</a><br />
    <a href="classes/Spec/Story/Runner/StoryMediator.html#M000095">create_given_scenario (Spec::Story::Runner::StoryMediator)</a><br />
    <a href="classes/Spec/Story/StepGroup.html#M000163">create_matcher (Spec::Story::StepGroup)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000299">create_nested_example_group (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser.html#M000034">create_scenario (Spec::Story::Runner::StoryParser)</a><br />
    <a href="classes/Spec/Story/Runner/StoryMediator.html#M000093">create_scenario (Spec::Story::Runner::StoryMediator)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000298">create_shared_example_group (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Story/Runner/StoryMediator.html#M000092">create_story (Spec::Story::Runner::StoryMediator)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser.html#M000033">create_story (Spec::Story::Runner::StoryParser)</a><br />
    <a href="classes/Spec/Story/Runner.html#M000025">create_story_runner (Spec::Story::Runner)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser.html#M000038">create_then (Spec::Story::Runner::StoryParser)</a><br />
    <a href="classes/Spec/Story/Runner/StoryMediator.html#M000097">create_then (Spec::Story::Runner::StoryMediator)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser.html#M000037">create_when (Spec::Story::Runner::StoryParser)</a><br />
    <a href="classes/Spec/Story/Runner/StoryMediator.html#M000096">create_when (Spec::Story::Runner::StoryMediator)</a><br />
    <a href="classes/Spec/Runner/Formatter/NestedTextFormatter.html#M000520">current_indentation (Spec::Runner::Formatter::NestedTextFormatter)</a><br />
    <a href="classes/Spec/Story/Runner/StoryMediator/Story.html#M000104">current_scenario (Spec::Story::Runner::StoryMediator::Story)</a><br />
    <a href="classes/Spec/Runner/Options.html#M000549">custom_runner (Spec::Runner::Options)</a><br />
    <a href="classes/Spec/Runner/Options.html#M000550">custom_runner? (Spec::Runner::Options)</a><br />
    <a href="classes/Spec/Example/ExampleGroupFactory.html#M000340">default (Spec::Example::ExampleGroupFactory)</a><br />
    <a href="classes/Spec/Runner/Options.html#M000554">default_differ (Spec::Runner::Options)</a><br />
    <a href="classes/RCov/VerifyTask.html#M000011">define (RCov::VerifyTask)</a><br />
    <a href="classes/Test/Unit/TestSuiteAdapter.html#M000625">delete (Test::Unit::TestSuiteAdapter)</a><br />
    <a href="classes/Spec/Extensions/Main.html#M000015">describe (Spec::Extensions::Main)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000296">describe (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Runner/Formatter/NestedTextFormatter.html#M000521">described_example_group_chain (Spec::Runner::Formatter::NestedTextFormatter)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000310">described_type (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Mocks/ArgumentConstraints/AnyArgsConstraint.html#M000192">description (Spec::Mocks::ArgumentConstraints::AnyArgsConstraint)</a><br />
    <a href="classes/Spec/Mocks/ArgumentConstraints/HashIncludingConstraint.html#M000185">description (Spec::Mocks::ArgumentConstraints::HashIncludingConstraint)</a><br />
    <a href="classes/Spec/Example/ExampleMethods.html#M000331">description (Spec::Example::ExampleMethods)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000309">description (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Matchers/SimpleMatcher.html#M000390">description (Spec::Matchers::SimpleMatcher)</a><br />
    <a href="classes/Spec/Matchers/BaseOperatorMatcher.html#M000403">description (Spec::Matchers::BaseOperatorMatcher)</a><br />
    <a href="classes/Spec/Mocks/ArgumentConstraints/NoArgsConstraint.html#M000188">description (Spec::Mocks::ArgumentConstraints::NoArgsConstraint)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000294">description_text (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Example/ExampleGroupFactory.html#M000343">determine_superclass (Spec::Example::ExampleGroupFactory)</a><br />
    <a href="classes/Spec/Expectations/Differs/Default.html#M000168">diff_as_object (Spec::Expectations::Differs::Default)</a><br />
    <a href="classes/Spec/Expectations/Differs/Default.html#M000167">diff_as_string (Spec::Expectations::Differs::Default)</a><br />
    <a href="classes/Spec/Runner/Options.html#M000547">differ_class= (Spec::Runner::Options)</a><br />
    <a href="classes/Spec/Story/Runner.html#M000027">dry_run (Spec::Story::Runner)</a><br />
    <a href="classes/Spec/Story/World.html#M000120">dry_run (Spec::Story::World)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseTextFormatter.html#M000500">dry_run? (Spec::Runner::Formatter::BaseTextFormatter)</a><br />
    <a href="classes/Spec/Mocks/ArgumentConstraints.html#M000178">duck_type (Spec::Mocks::ArgumentConstraints)</a><br />
    <a href="classes/Spec/Runner/Reporter.html#M000569">dump (Spec::Runner::Reporter)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseFormatter.html#M000481">dump_failure (Spec::Runner::Formatter::BaseFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/FailingExampleGroupsFormatter.html#M000523">dump_failure (Spec::Runner::Formatter::FailingExampleGroupsFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/HtmlFormatter.html#M000462">dump_failure (Spec::Runner::Formatter::HtmlFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/FailingExamplesFormatter.html#M000526">dump_failure (Spec::Runner::Formatter::FailingExamplesFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseTextFormatter.html#M000493">dump_failure (Spec::Runner::Formatter::BaseTextFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseFormatter.html#M000483">dump_pending (Spec::Runner::Formatter::BaseFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseTextFormatter.html#M000496">dump_pending (Spec::Runner::Formatter::BaseTextFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/HtmlFormatter.html#M000463">dump_summary (Spec::Runner::Formatter::HtmlFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseTextFormatter.html#M000495">dump_summary (Spec::Runner::Formatter::BaseTextFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseFormatter.html#M000482">dump_summary (Spec::Runner::Formatter::BaseFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/FailingExampleGroupsFormatter.html#M000524">dump_summary (Spec::Runner::Formatter::FailingExampleGroupsFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/FailingExamplesFormatter.html#M000527">dump_summary (Spec::Runner::Formatter::FailingExamplesFormatter)</a><br />
    <a href="classes/Test/Unit/TestSuiteAdapter.html#M000626">empty? (Test::Unit::TestSuiteAdapter)</a><br />
    <a href="classes/Spec/Story/StepGroup.html#M000160">empty? (Spec::Story::StepGroup)</a><br />
    <a href="classes/Spec/Story/StepMother.html#M000145">empty? (Spec::Story::StepMother)</a><br />
    <a href="classes/Spec/Runner/Reporter.html#M000568">end (Spec::Runner::Reporter)</a><br />
    <a href="classes/Spec/Adapters/RubyEngine.html#M000407">engine (Spec::Adapters::RubyEngine)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/State.html#M000069">eof (Spec::Story::Runner::StoryParser::State)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/StoryState.html#M000060">eof (Spec::Story::Runner::StoryParser::StoryState)</a><br />
    <a href="classes/Spec/Matchers.html#M000370">eql (Spec::Matchers)</a><br />
    <a href="classes/Spec/Matchers.html#M000378">equal (Spec::Matchers)</a><br />
    <a href="classes/Spec/Mocks/BaseExpectation.html#M000210">error_generator_opts= (Spec::Mocks::BaseExpectation)</a><br />
    <a href="classes/Spec/Story/World.html#M000119">errors (Spec::Story::World)</a><br />
    <a href="classes/Spec/Story/World.html#M000122">errors (Spec::Story::World)</a><br />
    <a href="classes/Spec/Example/ExampleMethods.html#M000334">eval_block (Spec::Example::ExampleMethods)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/WhenState.html#M000049">event (Spec::Story::Runner::StoryParser::WhenState)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/State.html#M000066">event (Spec::Story::Runner::StoryParser::State)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/StoryState.html#M000057">event (Spec::Story::Runner::StoryParser::StoryState)</a><br />
    <a href="classes/Spec/Mocks/MessageExpectation.html#M000236">exactly (Spec::Mocks::MessageExpectation)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000302">example (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Runner/Formatter/NestedTextFormatter.html#M000517">example_failed (Spec::Runner::Formatter::NestedTextFormatter)</a><br />
    <a href="classes/Spec/Runner/Reporter.html#M000566">example_failed (Spec::Runner::Reporter)</a><br />
    <a href="classes/Spec/Runner/Formatter/HtmlFormatter.html#M000457">example_failed (Spec::Runner::Formatter::HtmlFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/FailingExampleGroupsFormatter.html#M000522">example_failed (Spec::Runner::Formatter::FailingExampleGroupsFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseFormatter.html#M000478">example_failed (Spec::Runner::Formatter::BaseFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/FailingExamplesFormatter.html#M000525">example_failed (Spec::Runner::Formatter::FailingExamplesFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/ProgressBarFormatter.html#M000509">example_failed (Spec::Runner::Formatter::ProgressBarFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/SpecdocFormatter.html#M000470">example_failed (Spec::Runner::Formatter::SpecdocFormatter)</a><br />
    <a href="classes/Spec/Runner/Reporter.html#M000564">example_finished (Spec::Runner::Reporter)</a><br />
    <a href="classes/Spec/Runner/Formatter/HtmlFormatter.html#M000450">example_group_number (Spec::Runner::Formatter::HtmlFormatter)</a><br />
    <a href="classes/Spec/Example/ExampleMatcher.html#M000364">example_group_regex (Spec::Example::ExampleMatcher)</a><br />
    <a href="classes/Spec/Example/ExampleMatcher.html#M000366">example_group_regex_not_considering_modules (Spec::Example::ExampleMatcher)</a><br />
    <a href="classes/Spec/Example/ExampleMatcher.html#M000365">example_group_with_before_all_regexp (Spec::Example::ExampleMatcher)</a><br />
    <a href="classes/Spec/Runner/ExampleGroupRunner.html#M000595">example_groups (Spec::Runner::ExampleGroupRunner)</a><br />
    <a href="classes/Test/Unit/TestCase.html#M000629">example_method? (Test::Unit::TestCase)</a><br />
    <a href="classes/Spec/Runner/Reporter/Failure.html#M000574">example_name (Spec::Runner::Reporter::Failure)</a><br />
    <a href="classes/Spec/Runner/Formatter/HtmlFormatter.html#M000451">example_number (Spec::Runner::Formatter::HtmlFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/ProfileFormatter.html#M000488">example_passed (Spec::Runner::Formatter::ProfileFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/NestedTextFormatter.html#M000518">example_passed (Spec::Runner::Formatter::NestedTextFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/ProgressBarFormatter.html#M000510">example_passed (Spec::Runner::Formatter::ProgressBarFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/SpecdocFormatter.html#M000471">example_passed (Spec::Runner::Formatter::SpecdocFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/HtmlFormatter.html#M000456">example_passed (Spec::Runner::Formatter::HtmlFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseFormatter.html#M000477">example_passed (Spec::Runner::Formatter::BaseFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/HtmlFormatter.html#M000458">example_pending (Spec::Runner::Formatter::HtmlFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/SpecdocFormatter.html#M000472">example_pending (Spec::Runner::Formatter::SpecdocFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/ProgressBarFormatter.html#M000511">example_pending (Spec::Runner::Formatter::ProgressBarFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseTextFormatter.html#M000492">example_pending (Spec::Runner::Formatter::BaseTextFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/NestedTextFormatter.html#M000519">example_pending (Spec::Runner::Formatter::NestedTextFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseFormatter.html#M000479">example_pending (Spec::Runner::Formatter::BaseFormatter)</a><br />
    <a href="classes/Spec/Example/ExampleMatcher.html#M000367">example_regexp (Spec::Example::ExampleMatcher)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseFormatter.html#M000476">example_started (Spec::Runner::Formatter::BaseFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/HtmlFormatter.html#M000455">example_started (Spec::Runner::Formatter::HtmlFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/ProfileFormatter.html#M000487">example_started (Spec::Runner::Formatter::ProfileFormatter)</a><br />
    <a href="classes/Spec/Runner/Reporter.html#M000563">example_started (Spec::Runner::Reporter)</a><br />
    <a href="classes/Spec/Runner/Options.html#M000534">examples_run? (Spec::Runner::Options)</a><br />
    <a href="classes/Spec/Runner/Options.html#M000546">examples_should_be_run? (Spec::Runner::Options)</a><br />
    <a href="classes/Spec/Runner/Options.html#M000535">examples_should_not_be_run (Spec::Runner::Options)</a><br />
    <a href="classes/Spec/Example/ExampleMethods.html#M000328">execute (Spec::Example::ExampleMethods)</a><br />
    <a href="classes/Spec/Example/SharedExampleGroup.html#M000349">execute_in_class_hierarchy (Spec::Example::SharedExampleGroup)</a><br />
    <a href="classes/Spec/Matchers.html#M000376">exist (Spec::Matchers)</a><br />
    <a href="classes/Spec.html#M000014">exit? (Spec)</a><br />
    <a href="classes/Spec/Runner/Reporter/Failure.html#M000573">expectation_not_met? (Spec::Runner::Reporter::Failure)</a><br />
    <a href="classes/Spec/Mocks/BaseExpectation.html#M000211">expected_args (Spec::Mocks::BaseExpectation)</a><br />
    <a href="classes/Spec/Mocks/MessageExpectation.html#M000227">expected_messages_received? (Spec::Mocks::MessageExpectation)</a><br />
    <a href="classes/Spec/Matchers/SimpleMatcher.html#M000393">explanation (Spec::Matchers::SimpleMatcher)</a><br />
    <a href="classes/Spec/Runner/Formatter/HtmlFormatter.html#M000459">extra_failure_content (Spec::Runner::Formatter::HtmlFormatter)</a><br />
    <a href="classes/Spec/Matchers/BaseOperatorMatcher.html#M000402">fail_with_message (Spec::Matchers::BaseOperatorMatcher)</a><br />
    <a href="classes/Spec/Runner/Reporter.html#M000565">failure (Spec::Runner::Reporter)</a><br />
    <a href="classes/Spec/Matchers/Exist.html#M000405">failure_message (Spec::Matchers::Exist)</a><br />
    <a href="classes/Spec/Matchers/SimpleMatcher.html#M000391">failure_message (Spec::Matchers::SimpleMatcher)</a><br />
    <a href="classes/Spec/Runner/Options.html#M000545">files_to_load (Spec::Runner::Options)</a><br />
    <a href="classes/Spec/Story/StepMother.html#M000143">find (Spec::Story::StepMother)</a><br />
    <a href="classes/Spec/Story/StepGroup.html#M000149">find (Spec::Story::StepGroup)</a><br />
    <a href="classes/Spec/Example/SharedExampleGroup.html#M000346">find_shared_example_group (Spec::Example::SharedExampleGroup)</a><br />
    <a href="classes/Spec/Runner/ExampleGroupRunner.html#M000592">finish (Spec::Runner::ExampleGroupRunner)</a><br />
    <a href="classes/Test/Unit/UI/Console/TestRunner.html#M000618">finished (Test::Unit::UI::Console::TestRunner)</a><br />
    <a href="classes/Test/Unit/UI/Console/TestRunner.html#M000617">finished_with_rspec (Test::Unit::UI::Console::TestRunner)</a><br />
    <a href="classes/Spec/Expectations/Differs/Default.html#M000169">format (Spec::Expectations::Differs::Default)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseTextFormatter.html#M000498">format_backtrace (Spec::Runner::Formatter::BaseTextFormatter)</a><br />
    <a href="classes/Spec/Runner/Options.html#M000540">formatters (Spec::Runner::Options)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/HtmlFormatter.html#M000419">found_scenario (Spec::Runner::Formatter::Story::HtmlFormatter)</a><br />
    <a href="classes/Spec/Mocks/MessageExpectation.html#M000234">generate_error (Spec::Mocks::MessageExpectation)</a><br />
    <a href="classes/Spec/Matchers/ModuleMethods.html#M000387">generated_description (Spec::Matchers::ModuleMethods)</a><br />
    <a href="classes/Spec/Example/ExampleGroupFactory.html#M000341">get (Spec::Example::ExampleGroupFactory)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/State.html#M000064">given (Spec::Story::Runner::StoryParser::State)</a><br />
    <a href="classes/Spec/Story/StepGroup.html#M000155">given (Spec::Story::StepGroup)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/GivenState.html#M000043">given (Spec::Story::Runner::StoryParser::GivenState)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/StoryState.html#M000056">given (Spec::Story::Runner::StoryParser::StoryState)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/State.html#M000065">given_scenario (Spec::Story::Runner::StoryParser::State)</a><br />
    <a href="classes/Spec/Story/StepGroup.html#M000154">given_scenario (Spec::Story::StepGroup)</a><br />
    <a href="classes/Spec/Runner/Formatter/HtmlFormatter.html#M000466">global_scripts (Spec::Runner::Formatter::HtmlFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/HtmlFormatter.html#M000467">global_styles (Spec::Runner::Formatter::HtmlFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseTextFormatter.html#M000504">green (Spec::Runner::Formatter::BaseTextFormatter)</a><br />
    <a href="classes/Spec/Expectations/ExpectationMatcherHandler.html#M000173">handle_matcher (Spec::Expectations::ExpectationMatcherHandler)</a><br />
    <a href="classes/Spec/Expectations/NegativeExpectationMatcherHandler.html#M000172">handle_matcher (Spec::Expectations::NegativeExpectationMatcherHandler)</a><br />
    <a href="classes/Spec/Mocks/OrderGroup.html#M000273">handle_order_constraint (Spec::Mocks::OrderGroup)</a><br />
    <a href="classes/Spec/Mocks/Proxy.html#M000256">has_negative_expectation? (Spec::Mocks::Proxy)</a><br />
    <a href="classes/Spec/Mocks/ArgumentConstraints.html#M000180">hash_including (Spec::Mocks::ArgumentConstraints)</a><br />
    <a href="classes/Spec/Matchers.html#M000379">have (Spec::Matchers)</a><br />
    <a href="classes/Spec/Matchers.html#M000381">have_at_least (Spec::Matchers)</a><br />
    <a href="classes/Spec/Matchers.html#M000382">have_at_most (Spec::Matchers)</a><br />
    <a href="classes/Spec/Matchers.html#M000380">have_exactly (Spec::Matchers)</a><br />
    <a href="classes/Spec/Runner/Reporter/Failure.html#M000571">header (Spec::Runner::Reporter::Failure)</a><br />
    <a href="classes/Spec/Runner/Options.html#M000551">heckle (Spec::Runner::Options)</a><br />
    <a href="classes/Spec/Runner/HeckleRunner.html#M000578">heckle_class_or_module (Spec::Runner::HeckleRunner)</a><br />
    <a href="classes/Spec/Runner/HeckleRunner.html#M000577">heckle_method (Spec::Runner::HeckleRunner)</a><br />
    <a href="classes/Spec/Runner/HeckleRunner.html#M000576">heckle_with (Spec::Runner::HeckleRunner)</a><br />
    <a href="classes/Spec/Runner/Formatter/HtmlFormatter.html#M000464">html_header (Spec::Runner::Formatter::HtmlFormatter)</a><br />
    <a href="classes/Spec/Mocks/MessageExpectation.html#M000228">ignoring_args? (Spec::Mocks::MessageExpectation)</a><br />
    <a href="classes/Spec/Example/ExampleMethods.html#M000335">implementation_backtrace (Spec::Example::ExampleMethods)</a><br />
    <a href="classes/Spec/Example/Configuration.html#M000351">include (Spec::Example::Configuration)</a><br />
    <a href="classes/Spec/Example/ModuleReopeningFix.html#M000327">include (Spec::Example::ModuleReopeningFix)</a><br />
    <a href="classes/Spec/Matchers.html#M000385">include (Spec::Matchers)</a><br />
    <a href="classes/Spec/Example/ModuleReopeningFix.html#M000326">included (Spec::Example::ModuleReopeningFix)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000295">inherited (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser.html#M000031">init_story (Spec::Story::Runner::StoryParser)</a><br />
    <a href="classes/Spec/Mocks/Mock.html#M000287">inspect (Spec::Mocks::Mock)</a><br />
    <a href="classes/Spec/Example/ExampleMethods.html#M000329">instance_variable_hash (Spec::Example::ExampleMethods)</a><br />
    <a href="classes/Spec/Mocks/BaseExpectation.html#M000217">invoke (Spec::Mocks::BaseExpectation)</a><br />
    <a href="classes/Spec/Mocks/BaseExpectation.html#M000221">invoke_consecutive_return_block (Spec::Mocks::BaseExpectation)</a><br />
    <a href="classes/Spec/Mocks/BaseExpectation.html#M000219">invoke_method_block (Spec::Mocks::BaseExpectation)</a><br />
    <a href="classes/Spec/Runner/OptionParser.html#M000601">invoke_requires (Spec::Runner::OptionParser)</a><br />
    <a href="classes/Spec/Mocks/BaseExpectation.html#M000222">invoke_return_block (Spec::Mocks::BaseExpectation)</a><br />
    <a href="classes/Spec/Mocks/BaseExpectation.html#M000220">invoke_with_yield (Spec::Mocks::BaseExpectation)</a><br />
    <a href="classes/Spec/Runner/SpecParser.html#M000586">is_best_match? (Spec::Runner::SpecParser)</a><br />
    <a href="classes/Spec/Mocks/ArgumentExpectation.html#M000279">is_matcher? (Spec::Mocks::ArgumentExpectation)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000303">it (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000300">it_should_behave_like (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Story/Runner/StoryMediator.html#M000098">last_step (Spec::Story::Runner::StoryMediator)</a><br />
    <a href="classes/Spec/Story/Runner/StoryMediator/Scenario.html#M000110">last_step (Spec::Story::Runner::StoryMediator::Scenario)</a><br />
    <a href="classes/Spec/Story/World.html#M000112">listeners (Spec::Story::World)</a><br />
    <a href="classes/Spec/Story/Runner/PlainTextStoryRunner.html#M000081">load (Spec::Story::Runner::PlainTextStoryRunner)</a><br />
    <a href="classes/Spec/Runner/Options.html#M000548">load_class (Spec::Runner::Options)</a><br />
    <a href="classes/Spec/Runner/ExampleGroupRunner.html#M000589">load_files (Spec::Runner::ExampleGroupRunner)</a><br />
    <a href="classes/Spec/Runner/Options.html#M000542">load_formatters (Spec::Runner::Options)</a><br />
    <a href="classes/Spec/Runner/Options.html#M000543">load_heckle_runner (Spec::Runner::Options)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseTextFormatter.html#M000506">magenta (Spec::Runner::Formatter::BaseTextFormatter)</a><br />
    <a href="classes/Autotest/Rspec.html#M000009">make_test_cmd (Autotest::Rspec)</a><br />
    <a href="classes/Spec/Matchers.html#M000371">match (Spec::Matchers)</a><br />
    <a href="classes/Spec/Mocks/ArgumentExpectation.html#M000283">match_any_args? (Spec::Mocks::ArgumentExpectation)</a><br />
    <a href="classes/Spec/Mocks/BaseExpectation.html#M000216">matches (Spec::Mocks::BaseExpectation)</a><br />
    <a href="classes/Spec/Matchers/Exist.html#M000404">matches? (Spec::Matchers::Exist)</a><br />
    <a href="classes/Spec/Matchers/SimpleMatcher.html#M000389">matches? (Spec::Matchers::SimpleMatcher)</a><br />
    <a href="classes/Spec/Story/Step.html#M000135">matches? (Spec::Story::Step)</a><br />
    <a href="classes/Spec/Example/ExampleMatcher.html#M000361">matches? (Spec::Example::ExampleMatcher)</a><br />
    <a href="classes/Spec/Mocks/MessageExpectation.html#M000229">matches_at_least_count? (Spec::Mocks::MessageExpectation)</a><br />
    <a href="classes/Spec/Mocks/MessageExpectation.html#M000230">matches_at_most_count? (Spec::Mocks::MessageExpectation)</a><br />
    <a href="classes/Spec/Mocks/MessageExpectation.html#M000231">matches_exact_count? (Spec::Mocks::MessageExpectation)</a><br />
    <a href="classes/Spec/Example/ExampleMatcher.html#M000363">matches_example_not_considering_modules? (Spec::Example::ExampleMatcher)</a><br />
    <a href="classes/Spec/Example/ExampleMatcher.html#M000362">matches_literal_example? (Spec::Example::ExampleMatcher)</a><br />
    <a href="classes/Spec/Mocks/MessageExpectation.html#M000225">matches_name_but_not_args (Spec::Mocks::MessageExpectation)</a><br />
    <a href="classes/Spec/Mocks/Proxy.html#M000257">message_received (Spec::Mocks::Proxy)</a><br />
    <a href="classes/Spec/MetaClass.html#M000174">metaclass (Spec::MetaClass)</a><br />
    <a href="classes/Spec/Runner/Formatter/ProfileFormatter.html#M000490">method_missing (Spec::Runner::Formatter::ProfileFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/ProgressBarFormatter.html#M000513">method_missing (Spec::Runner::Formatter::ProgressBarFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/HtmlFormatter.html#M000449">method_missing (Spec::Runner::Formatter::HtmlFormatter)</a><br />
    <a href="classes/Spec/Mocks/Mock.html#M000286">method_missing (Spec::Mocks::Mock)</a><br />
    <a href="classes/Spec/Mocks/ExampleMethods.html#M000204">mock (Spec::Mocks::ExampleMethods)</a><br />
    <a href="classes/Spec/Example/Configuration.html#M000350">mock_with (Spec::Example::Configuration)</a><br />
    <a href="classes/Spec/Runner/Formatter/HtmlFormatter.html#M000460">move_progress (Spec::Runner::Formatter::HtmlFormatter)</a><br />
    <a href="classes/Test/Unit/TestSuiteAdapter.html#M000622">name (Test::Unit::TestSuiteAdapter)</a><br />
    <a href="classes/Spec/Mocks/MessageExpectation.html#M000245">negative_expectation_for? (Spec::Mocks::MessageExpectation)</a><br />
    <a href="classes/Spec/Mocks/NegativeMessageExpectation.html#M000224">negative_expectation_for? (Spec::Mocks::NegativeMessageExpectation)</a><br />
    <a href="classes/Spec/Matchers/Exist.html#M000406">negative_failure_message (Spec::Matchers::Exist)</a><br />
    <a href="classes/Spec/Matchers/SimpleMatcher.html#M000392">negative_failure_message (Spec::Matchers::SimpleMatcher)</a><br />
    <a href="classes/Spec/Mocks/MessageExpectation.html#M000241">never (Spec::Mocks::MessageExpectation)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser.html#M000028">new (Spec::Story::Runner::StoryParser)</a><br />
    <a href="classes/Spec/Mocks/ArgumentConstraints/HashIncludingConstraint.html#M000183">new (Spec::Mocks::ArgumentConstraints::HashIncludingConstraint)</a><br />
    <a href="classes/Spec/Story/GivenScenario.html#M000138">new (Spec::Story::GivenScenario)</a><br />
    <a href="classes/Spec/Mocks/ArgumentConstraints/DuckTypeConstraint.html#M000186">new (Spec::Mocks::ArgumentConstraints::DuckTypeConstraint)</a><br />
    <a href="classes/Spec/Example/SharedExampleGroup.html#M000348">new (Spec::Example::SharedExampleGroup)</a><br />
    <a href="classes/Spec/Story/StepGroupHash.html#M000137">new (Spec::Story::StepGroupHash)</a><br />
    <a href="classes/Spec/Mocks/OrderGroup.html#M000269">new (Spec::Mocks::OrderGroup)</a><br />
    <a href="classes/Spec/Mocks/ArgumentConstraints/EqualityProxy.html#M000181">new (Spec::Mocks::ArgumentConstraints::EqualityProxy)</a><br />
    <a href="classes/Spec/Mocks/ArgumentConstraints/MatcherConstraint.html#M000190">new (Spec::Mocks::ArgumentConstraints::MatcherConstraint)</a><br />
    <a href="classes/Spec/Story/Runner/ScenarioCollector.html#M000073">new (Spec::Story::Runner::ScenarioCollector)</a><br />
    <a href="classes/Spec/Story/Runner/IllegalStepError.html#M000078">new (Spec::Story::Runner::IllegalStepError)</a><br />
    <a href="classes/Spec/Example/ExampleGroup.html#M000344">new (Spec::Example::ExampleGroup)</a><br />
    <a href="classes/Spec/Mocks/ArgumentConstraints/BooleanConstraint.html#M000193">new (Spec::Mocks::ArgumentConstraints::BooleanConstraint)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/PlainTextFormatter.html#M000428">new (Spec::Runner::Formatter::Story::PlainTextFormatter)</a><br />
    <a href="classes/Spec/Story/Runner/StoryMediator/Scenario.html#M000107">new (Spec::Story::Runner::StoryMediator::Scenario)</a><br />
    <a href="classes/Spec/Example/ExamplePendingError.html#M000359">new (Spec::Example::ExamplePendingError)</a><br />
    <a href="classes/Spec/Example/ExampleMatcher.html#M000360">new (Spec::Example::ExampleMatcher)</a><br />
    <a href="classes/Spec/Mocks/ArgumentConstraints/AnyArgConstraint.html#M000195">new (Spec::Mocks::ArgumentConstraints::AnyArgConstraint)</a><br />
    <a href="classes/Spec/Story/Runner/PlainTextStoryRunner.html#M000079">new (Spec::Story::Runner::PlainTextStoryRunner)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/StartingState.html#M000072">new (Spec::Story::Runner::StoryParser::StartingState)</a><br />
    <a href="classes/Spec/Mocks/ErrorGenerator.html#M000260">new (Spec::Mocks::ErrorGenerator)</a><br />
    <a href="classes/Spec/Mocks/ArgumentExpectation.html#M000277">new (Spec::Mocks::ArgumentExpectation)</a><br />
    <a href="classes/Spec/Runner/SpecParser.html#M000582">new (Spec::Runner::SpecParser)</a><br />
    <a href="classes/Spec/Mocks/ArgumentConstraints/RegexpConstraint.html#M000197">new (Spec::Mocks::ArgumentConstraints::RegexpConstraint)</a><br />
    <a href="classes/Spec/Example/NotYetImplementedError.html#M000368">new (Spec::Example::NotYetImplementedError)</a><br />
    <a href="classes/Spec/Runner/HeckleRunner.html#M000575">new (Spec::Runner::HeckleRunner)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseFormatter.html#M000473">new (Spec::Runner::Formatter::BaseFormatter)</a><br />
    <a href="classes/RCov/VerifyTask.html#M000010">new (RCov::VerifyTask)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseTextFormatter.html#M000491">new (Spec::Runner::Formatter::BaseTextFormatter)</a><br />
    <a href="classes/Spec/Story/Runner/StoryMediator/Step.html#M000105">new (Spec::Story::Runner::StoryMediator::Step)</a><br />
    <a href="classes/Spec/Story/StepMother.html#M000140">new (Spec::Story::StepMother)</a><br />
    <a href="classes/Spec/Rake/SpecTask.html#M000610">new (Spec::Rake::SpecTask)</a><br />
    <a href="classes/Spec/Runner/Reporter/Failure.html#M000570">new (Spec::Runner::Reporter::Failure)</a><br />
    <a href="classes/Spec/Mocks/Proxy.html#M000248">new (Spec::Mocks::Proxy)</a><br />
    <a href="classes/Spec/Runner/HeckleRunner.html#M000580">new (Spec::Runner::HeckleRunner)</a><br />
    <a href="classes/Spec/Runner/Heckler.html#M000558">new (Spec::Runner::Heckler)</a><br />
    <a href="classes/Spec/Runner/OptionParser.html#M000599">new (Spec::Runner::OptionParser)</a><br />
    <a href="classes/Spec/Story/Step.html#M000133">new (Spec::Story::Step)</a><br />
    <a href="classes/Spec/Runner/Reporter.html#M000561">new (Spec::Runner::Reporter)</a><br />
    <a href="classes/Test/Unit/TestCase.html#M000631">new (Test::Unit::TestCase)</a><br />
    <a href="classes/Spec/Mocks/Mock.html#M000284">new (Spec::Mocks::Mock)</a><br />
    <a href="classes/Spec/Expectations/Differs/Default.html#M000166">new (Spec::Expectations::Differs::Default)</a><br />
    <a href="classes/Spec/Story/Runner/StoryMediator/Story.html#M000101">new (Spec::Story::Runner::StoryMediator::Story)</a><br />
    <a href="classes/Spec/Story/StepGroup.html#M000148">new (Spec::Story::StepGroup)</a><br />
    <a href="classes/Spec/Matchers/SimpleMatcher.html#M000388">new (Spec::Matchers::SimpleMatcher)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/HtmlFormatter.html#M000411">new (Spec::Runner::Formatter::Story::HtmlFormatter)</a><br />
    <a href="classes/Spec/Mocks/BaseExpectation.html#M000208">new (Spec::Mocks::BaseExpectation)</a><br />
    <a href="classes/Spec/Example/ModuleInclusionWarnings/MethodDispatcher.html#M000291">new (Spec::Example::ModuleInclusionWarnings::MethodDispatcher)</a><br />
    <a href="classes/Spec/Runner/Options.html#M000530">new (Spec::Runner::Options)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/State.html#M000061">new (Spec::Story::Runner::StoryParser::State)</a><br />
    <a href="classes/Spec/Matchers/BaseOperatorMatcher.html#M000394">new (Spec::Matchers::BaseOperatorMatcher)</a><br />
    <a href="classes/Spec/Runner/Formatter/ProfileFormatter.html#M000485">new (Spec::Runner::Formatter::ProfileFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/NestedTextFormatter.html#M000515">new (Spec::Runner::Formatter::NestedTextFormatter)</a><br />
    <a href="classes/Spec/Story/Scenario.html#M000146">new (Spec::Story::Scenario)</a><br />
    <a href="classes/Spec/Mocks/NegativeMessageExpectation.html#M000223">new (Spec::Mocks::NegativeMessageExpectation)</a><br />
    <a href="classes/Test/Unit/TestSuiteAdapter.html#M000621">new (Test::Unit::TestSuiteAdapter)</a><br />
    <a href="classes/Spec/Story/Runner/StoryMediator.html#M000090">new (Spec::Story::Runner::StoryMediator)</a><br />
    <a href="classes/Spec/Story/Runner/ScenarioRunner.html#M000075">new (Spec::Story::Runner::ScenarioRunner)</a><br />
    <a href="classes/Spec/Story/Story.html#M000128">new (Spec::Story::Story)</a><br />
    <a href="classes/Spec/Story/Runner/StoryRunner.html#M000085">new (Spec::Story::Runner::StoryRunner)</a><br />
    <a href="classes/Spec/Runner/Formatter/HtmlFormatter.html#M000448">new (Spec::Runner::Formatter::HtmlFormatter)</a><br />
    <a href="classes/Spec/Runner/ExampleGroupRunner.html#M000588">new (Spec::Runner::ExampleGroupRunner)</a><br />
    <a href="classes/Autotest/Rspec.html#M000007">new (Autotest::Rspec)</a><br />
    <a href="classes/Spec/Mocks/ArgumentConstraints.html#M000177">no_args (Spec::Mocks::ArgumentConstraints)</a><br />
    <a href="classes/Spec/Mocks/Proxy.html#M000249">null_object? (Spec::Mocks::Proxy)</a><br />
    <a href="classes/Spec/Mocks/Methods.html#M000203">null_object? (Spec::Mocks::Methods)</a><br />
    <a href="classes/Spec/Runner/ExampleGroupRunner.html#M000596">number_of_examples (Spec::Runner::ExampleGroupRunner)</a><br />
    <a href="classes/Spec/Runner/Options.html#M000544">number_of_examples (Spec::Runner::Options)</a><br />
    <a href="classes/Spec/Mocks/MessageExpectation.html#M000242">once (Spec::Mocks::MessageExpectation)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/GivenState.html#M000042">one_more_of_the_same (Spec::Story::Runner::StoryParser::GivenState)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/StoryState.html#M000053">one_more_of_the_same (Spec::Story::Runner::StoryParser::StoryState)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/ThenState.html#M000045">one_more_of_the_same (Spec::Story::Runner::StoryParser::ThenState)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/WhenState.html#M000048">one_more_of_the_same (Spec::Story::Runner::StoryParser::WhenState)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/ScenarioState.html#M000051">one_more_of_the_same (Spec::Story::Runner::StoryParser::ScenarioState)</a><br />
    <a href="classes/Spec/Mocks/ErrorGenerator.html#M000261">opts (Spec::Mocks::ErrorGenerator)</a><br />
    <a href="classes/Spec/Runner/OptionParser.html#M000600">order! (Spec::Runner::OptionParser)</a><br />
    <a href="classes/Spec/Mocks/MessageExpectation.html#M000244">ordered (Spec::Mocks::MessageExpectation)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/State.html#M000070">other (Spec::Story::Runner::StoryParser::State)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/ThenState.html#M000047">other (Spec::Story::Runner::StoryParser::ThenState)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/GivenState.html#M000044">other (Spec::Story::Runner::StoryParser::GivenState)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/StoryState.html#M000059">other (Spec::Story::Runner::StoryParser::StoryState)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/WhenState.html#M000050">other (Spec::Story::Runner::StoryParser::WhenState)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/StoryState.html#M000058">outcome (Spec::Story::Runner::StoryParser::StoryState)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/State.html#M000067">outcome (Spec::Story::Runner::StoryParser::State)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/ThenState.html#M000046">outcome (Spec::Story::Runner::StoryParser::ThenState)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseTextFormatter.html#M000503">output_to_tty? (Spec::Runner::Formatter::BaseTextFormatter)</a><br />
    <a href="classes/Spec/Runner/ClassAndArgumentsParser.html#M000557">parse (Spec::Runner::ClassAndArgumentsParser)</a><br />
    <a href="classes/Spec/Runner/OptionParser.html#M000598">parse (Spec::Runner::OptionParser)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser.html#M000029">parse (Spec::Story::Runner::StoryParser)</a><br />
    <a href="classes/Spec/Story/Step.html#M000136">parse_args (Spec::Story::Step)</a><br />
    <a href="classes/Spec/Runner/SpecParser.html#M000587">parse_backtrace (Spec::Runner::SpecParser)</a><br />
    <a href="classes/Spec/Runner/Options.html#M000537">parse_diff (Spec::Runner::Options)</a><br />
    <a href="classes/Spec/Runner/OptionParser.html#M000605">parse_drb (Spec::Runner::OptionParser)</a><br />
    <a href="classes/Spec/Runner/Options.html#M000538">parse_example (Spec::Runner::Options)</a><br />
    <a href="classes/Spec/Runner/Options.html#M000539">parse_format (Spec::Runner::Options)</a><br />
    <a href="classes/Spec/Runner/OptionParser.html#M000603">parse_generate_options (Spec::Runner::OptionParser)</a><br />
    <a href="classes/Spec/Runner/OptionParser.html#M000607">parse_help (Spec::Runner::OptionParser)</a><br />
    <a href="classes/Spec/Runner/OptionParser.html#M000602">parse_options_file (Spec::Runner::OptionParser)</a><br />
    <a href="classes/Spec/Runner/OptionParser.html#M000606">parse_version (Spec::Runner::OptionParser)</a><br />
    <a href="classes/Test/Unit/TestResult.html#M000633">passed? (Test::Unit::TestResult)</a><br />
    <a href="classes/Spec/Example/Pending.html#M000289">pending (Spec::Example::Pending)</a><br />
    <a href="classes/Spec/Runner/Reporter/Failure.html#M000572">pending_fixed? (Spec::Runner::Reporter::Failure)</a><br />
    <a href="classes/Spec/Runner/Formatter/HtmlFormatter.html#M000461">percent_done (Spec::Runner::Formatter::HtmlFormatter)</a><br />
    <a href="classes/Spec/Story/Step.html#M000134">perform (Spec::Story::Step)</a><br />
    <a href="classes/Spec/Story/GivenScenario.html#M000139">perform (Spec::Story::GivenScenario)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000301">predicate_matchers (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Example/Configuration.html#M000352">predicate_matchers (Spec::Example::Configuration)</a><br />
    <a href="classes/Spec/Runner/ExampleGroupRunner.html#M000591">prepare (Spec::Runner::ExampleGroupRunner)</a><br />
    <a href="classes/Spec/Example/Configuration.html#M000356">prepend_after (Spec::Example::Configuration)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000315">prepend_after (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000312">prepend_before (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Example/Configuration.html#M000353">prepend_before (Spec::Example::Configuration)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/HtmlFormatter.html#M000427">print_step (Spec::Runner::Formatter::Story::HtmlFormatter)</a><br />
    <a href="classes/Test/Unit/AutoRunner.html#M000627">process_args (Test::Unit::AutoRunner)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser.html#M000030">process_line (Spec::Story::Runner::StoryParser)</a><br />
    <a href="classes/Spec/Mocks/ErrorGenerator.html#M000266">raise_block_failed_error (Spec::Mocks::ErrorGenerator)</a><br />
    <a href="classes/Spec/Matchers.html#M000369">raise_error (Spec::Matchers)</a><br />
    <a href="classes/Spec/Mocks/ErrorGenerator.html#M000264">raise_expectation_error (Spec::Mocks::ErrorGenerator)</a><br />
    <a href="classes/Spec/Mocks/ErrorGenerator.html#M000267">raise_missing_block_error (Spec::Mocks::ErrorGenerator)</a><br />
    <a href="classes/Spec/Mocks/ErrorGenerator.html#M000265">raise_out_of_order_error (Spec::Mocks::ErrorGenerator)</a><br />
    <a href="classes/Spec/Mocks/Proxy.html#M000258">raise_unexpected_message_args_error (Spec::Mocks::Proxy)</a><br />
    <a href="classes/Spec/Mocks/ErrorGenerator.html#M000263">raise_unexpected_message_args_error (Spec::Mocks::ErrorGenerator)</a><br />
    <a href="classes/Spec/Mocks/Proxy.html#M000259">raise_unexpected_message_error (Spec::Mocks::Proxy)</a><br />
    <a href="classes/Spec/Mocks/ErrorGenerator.html#M000262">raise_unexpected_message_error (Spec::Mocks::ErrorGenerator)</a><br />
    <a href="classes/Spec/Mocks/ErrorGenerator.html#M000268">raise_wrong_arity_error (Spec::Mocks::ErrorGenerator)</a><br />
    <a href="classes/Spec/Mocks/OrderGroup.html#M000271">ready_for? (Spec::Mocks::OrderGroup)</a><br />
    <a href="classes/Spec/Mocks/Proxy.html#M000255">received_message? (Spec::Mocks::Proxy)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseTextFormatter.html#M000505">red (Spec::Runner::Formatter::BaseTextFormatter)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000321">register (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Mocks/OrderGroup.html#M000270">register (Spec::Mocks::OrderGroup)</a><br />
    <a href="classes/Spec/Example/ExampleGroupFactory.html#M000339">register (Spec::Example::ExampleGroupFactory)</a><br />
    <a href="classes/Spec/Story/Runner.html#M000026">register_listener (Spec::Story::Runner)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000322">registration_backtrace (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000318">remove_after (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Runner/Options.html#M000532">remove_example_group (Spec::Runner::Options)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/State.html#M000068">remove_tag_from (Spec::Story::Runner::StoryParser::State)</a><br />
    <a href="classes/Spec/Runner/Formatter/HtmlFormatter.html#M000465">report_header (Spec::Runner::Formatter::HtmlFormatter)</a><br />
    <a href="classes/Spec/Runner/ExampleGroupRunner.html#M000593">reporter (Spec::Runner::ExampleGroupRunner)</a><br />
    <a href="classes/Spec/Example/ExampleGroupFactory.html#M000338">reset (Spec::Example::ExampleGroupFactory)</a><br />
    <a href="classes/Spec/Mocks/Proxy.html#M000254">reset (Spec::Mocks::Proxy)</a><br />
    <a href="classes/Spec/Mocks/Space.html#M000276">reset_all (Spec::Mocks::Space)</a><br />
    <a href="classes/Spec/Matchers.html#M000377">respond_to (Spec::Matchers)</a><br />
    <a href="classes/Spec/Example/ModuleInclusionWarnings.html#M000290">respond_to? (Spec::Example::ModuleInclusionWarnings)</a><br />
    <a href="classes/Spec/Example/ModuleInclusionWarnings/MethodDispatcher.html#M000292">respond_to? (Spec::Example::ModuleInclusionWarnings::MethodDispatcher)</a><br />
    <a href="classes/Spec/Runner/ExampleGroupRunner.html#M000594">reverse (Spec::Runner::ExampleGroupRunner)</a><br />
    <a href="classes/Spec/Story/Runner/ScenarioRunner.html#M000076">run (Spec::Story::Runner::ScenarioRunner)</a><br />
    <a href="classes/Spec/Story/Runner/PlainTextStoryRunner.html#M000082">run (Spec::Story::Runner::PlainTextStoryRunner)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000308">run (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Runner/DrbCommandLine.html#M000560">run (Spec::Runner::DrbCommandLine)</a><br />
    <a href="classes/Spec.html#M000013">run (Spec)</a><br />
    <a href="classes/Test/Unit/TestCase.html#M000632">run (Test::Unit::TestCase)</a><br />
    <a href="classes/Spec/Story/Extensions/Main/StoryRunnerStepGroupAdapter.html#M000024">run (Spec::Story::Extensions::Main::StoryRunnerStepGroupAdapter)</a><br />
    <a href="classes/Spec/Runner/ExampleGroupRunner.html#M000590">run (Spec::Runner::ExampleGroupRunner)</a><br />
    <a href="classes/Spec/Runner/CommandLine.html#M000529">run (Spec::Runner::CommandLine)</a><br />
    <a href="classes/Test/Unit/TestSuiteAdapter.html#M000623">run (Test::Unit::TestSuiteAdapter)</a><br />
    <a href="classes/Spec.html#M000012">run? (Spec)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000324">run_after_each (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000323">run_before_each (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/HtmlFormatter.html#M000414">run_ended (Spec::Runner::Formatter::Story::HtmlFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/ProgressBarFormatter.html#M000446">run_ended (Spec::Runner::Formatter::Story::ProgressBarFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/PlainTextFormatter.html#M000437">run_ended (Spec::Runner::Formatter::Story::PlainTextFormatter)</a><br />
    <a href="classes/Spec/Runner/Options.html#M000533">run_examples (Spec::Runner::Options)</a><br />
    <a href="classes/Spec/Story/World.html#M000117">run_given_scenario_with_suspended_listeners (Spec::Story::World)</a><br />
    <a href="classes/Spec/Story/Story.html#M000130">run_in (Spec::Story::Story)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/PlainTextFormatter.html#M000429">run_started (Spec::Runner::Formatter::Story::PlainTextFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/ProgressBarFormatter.html#M000445">run_started (Spec::Runner::Formatter::Story::ProgressBarFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/HtmlFormatter.html#M000412">run_started (Spec::Runner::Formatter::Story::HtmlFormatter)</a><br />
    <a href="classes/Spec/Story/Runner/StoryMediator.html#M000100">run_stories (Spec::Story::Runner::StoryMediator)</a><br />
    <a href="classes/Spec/Story/Runner/StoryRunner.html#M000087">run_stories (Spec::Story::Runner::StoryRunner)</a><br />
    <a href="classes/Spec/Story/Extensions/Main.html#M000021">run_story (Spec::Story::Extensions::Main)</a><br />
    <a href="classes/Spec/Matchers.html#M000384">satisfy (Spec::Matchers)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/StoryState.html#M000055">scenario (Spec::Story::Runner::StoryParser::StoryState)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/ScenarioState.html#M000052">scenario (Spec::Story::Runner::StoryParser::ScenarioState)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/State.html#M000063">scenario (Spec::Story::Runner::StoryParser::State)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/PlainTextFormatter.html#M000436">scenario_ended (Spec::Runner::Formatter::Story::PlainTextFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/ProgressBarFormatter.html#M000447">scenario_ended (Spec::Runner::Formatter::Story::ProgressBarFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/HtmlFormatter.html#M000418">scenario_ended (Spec::Runner::Formatter::Story::HtmlFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/PlainTextFormatter.html#M000434">scenario_failed (Spec::Runner::Formatter::Story::PlainTextFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/HtmlFormatter.html#M000422">scenario_failed (Spec::Runner::Formatter::Story::HtmlFormatter)</a><br />
    <a href="classes/Spec/Story/Runner/StoryRunner.html#M000084">scenario_from_current_story (Spec::Story::Runner::StoryRunner)</a><br />
    <a href="classes/Spec/Story/Runner/StoryRunner.html#M000089">scenario_from_current_story (Spec::Story::Runner::StoryRunner)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/HtmlFormatter.html#M000421">scenario_pending (Spec::Runner::Formatter::Story::HtmlFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/PlainTextFormatter.html#M000435">scenario_pending (Spec::Runner::Formatter::Story::PlainTextFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/PlainTextFormatter.html#M000432">scenario_started (Spec::Runner::Formatter::Story::PlainTextFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/HtmlFormatter.html#M000417">scenario_started (Spec::Runner::Formatter::Story::HtmlFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/HtmlFormatter.html#M000420">scenario_succeeded (Spec::Runner::Formatter::Story::HtmlFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/PlainTextFormatter.html#M000433">scenario_succeeded (Spec::Runner::Formatter::Story::PlainTextFormatter)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000311">set_description (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Mocks/MessageExpectation.html#M000246">set_expected_received_count (Spec::Mocks::MessageExpectation)</a><br />
    <a href="classes/Spec/Example/ExampleMethods.html#M000333">set_instance_variables_from_hash (Spec::Example::ExampleMethods)</a><br />
    <a href="classes/Spec/Runner/Options.html#M000555">set_spec_from_line_number (Spec::Runner::Options)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000319">setup (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Test/Unit/UI/Console/TestRunner.html#M000620">setup_mediator (Test::Unit::UI::Console::TestRunner)</a><br />
    <a href="classes/Test/Unit/UI/Console/TestRunner.html#M000619">setup_mediator_with_rspec (Test::Unit::UI::Console::TestRunner)</a><br />
    <a href="classes/Spec/Extensions/Main.html#M000019">share_as (Spec::Extensions::Main)</a><br />
    <a href="classes/Spec/Extensions/Main.html#M000017">share_examples_for (Spec::Extensions::Main)</a><br />
    <a href="classes/Spec/Example/SharedExampleGroup.html#M000347">shared_example_groups (Spec::Example::SharedExampleGroup)</a><br />
    <a href="classes/Spec/Extensions/Main.html#M000018">shared_examples_for (Spec::Extensions::Main)</a><br />
    <a href="classes/Spec/Expectations/ObjectExpectations.html#M000164">should (Spec::Expectations::ObjectExpectations)</a><br />
    <a href="classes/Spec/Expectations/ObjectExpectations.html#M000165">should_not (Spec::Expectations::ObjectExpectations)</a><br />
    <a href="classes/Spec/Mocks/Methods.html#M000200">should_not_receive (Spec::Mocks::Methods)</a><br />
    <a href="classes/Spec/Mocks/Methods.html#M000199">should_receive (Spec::Mocks::Methods)</a><br />
    <a href="classes/Spec/Mocks/MessageExpectation.html#M000232">similar_messages (Spec::Mocks::MessageExpectation)</a><br />
    <a href="classes/Spec/Matchers.html#M000372">simple_matcher (Spec::Matchers)</a><br />
    <a href="classes/Test/Unit/TestSuiteAdapter.html#M000624">size (Test::Unit::TestSuiteAdapter)</a><br />
    <a href="classes/Spec/Runner/Options.html#M000552">sorted_files (Spec::Runner::Options)</a><br />
    <a href="classes/Spec/Runner/Options.html#M000553">sorter (Spec::Runner::Options)</a><br />
    <a href="classes/Spec/Runner/SpecParser.html#M000583">spec_name_for (Spec::Runner::SpecParser)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000304">specify (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseFormatter.html#M000474">start (Spec::Runner::Formatter::BaseFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/ProfileFormatter.html#M000486">start (Spec::Runner::Formatter::ProfileFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/HtmlFormatter.html#M000452">start (Spec::Runner::Formatter::HtmlFormatter)</a><br />
    <a href="classes/Spec/Runner/Reporter.html#M000567">start (Spec::Runner::Reporter)</a><br />
    <a href="classes/Spec/Story/World.html#M000121">start_collecting_errors (Spec::Story::World)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseFormatter.html#M000480">start_dump (Spec::Runner::Formatter::BaseFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/ProgressBarFormatter.html#M000512">start_dump (Spec::Runner::Formatter::ProgressBarFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/HtmlFormatter.html#M000454">start_dump (Spec::Runner::Formatter::HtmlFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/ProfileFormatter.html#M000489">start_dump (Spec::Runner::Formatter::ProfileFormatter)</a><br />
    <a href="classes/Test/Unit/UI/Console/TestRunner.html#M000612">started (Test::Unit::UI::Console::TestRunner)</a><br />
    <a href="classes/Test/Unit/UI/Console/TestRunner.html#M000611">started_with_rspec (Test::Unit::UI::Console::TestRunner)</a><br />
    <a href="classes/Spec/Expectations/StringHelpers.html#M000171">starts_with? (Spec::Expectations::StringHelpers)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser.html#M000041">states (Spec::Story::Runner::StoryParser)</a><br />
    <a href="classes/Spec/Runner/Options.html#M000556">stderr? (Spec::Runner::Options)</a><br />
    <a href="classes/Spec/Runner/OptionParser.html#M000608">stdout? (Spec::Runner::OptionParser)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/PlainTextFormatter.html#M000441">step_failed (Spec::Runner::Formatter::Story::PlainTextFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/HtmlFormatter.html#M000426">step_failed (Spec::Runner::Formatter::Story::HtmlFormatter)</a><br />
    <a href="classes/Spec/Story/World.html#M000114">step_mother (Spec::Story::World)</a><br />
    <a href="classes/String.html#M000005">step_name (String)</a><br />
    <a href="classes/Regexp.html#M000002">step_name (Regexp)</a><br />
    <a href="classes/Spec/Story/World.html#M000116">step_names (Spec::Story::World)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/PlainTextFormatter.html#M000440">step_pending (Spec::Runner::Formatter::Story::PlainTextFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/HtmlFormatter.html#M000425">step_pending (Spec::Runner::Formatter::Story::HtmlFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/HtmlFormatter.html#M000424">step_succeeded (Spec::Runner::Formatter::Story::HtmlFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/PlainTextFormatter.html#M000439">step_succeeded (Spec::Runner::Formatter::Story::PlainTextFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/PlainTextFormatter.html#M000438">step_upcoming (Spec::Runner::Formatter::Story::PlainTextFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/HtmlFormatter.html#M000423">step_upcoming (Spec::Runner::Formatter::Story::HtmlFormatter)</a><br />
    <a href="classes/Spec/Story/Runner/PlainTextStoryRunner.html#M000083">steps (Spec::Story::Runner::PlainTextStoryRunner)</a><br />
    <a href="classes/Spec/Story/StepGroup.html#M000147">steps (Spec::Story::StepGroup)</a><br />
    <a href="classes/Spec/Story/Extensions/Main.html#M000022">steps_for (Spec::Story::Extensions::Main)</a><br />
    <a href="classes/Spec/Story/Story.html#M000132">steps_for (Spec::Story::Story)</a><br />
    <a href="classes/Spec/Story/StepMother.html#M000142">store (Spec::Story::StepMother)</a><br />
    <a href="classes/Spec/Story/World.html#M000118">store_and_call (Spec::Story::World)</a><br />
    <a href="classes/Spec/Story/Runner/StoryMediator.html#M000091">stories (Spec::Story::Runner::StoryMediator)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/StoryState.html#M000054">story (Spec::Story::Runner::StoryParser::StoryState)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser/State.html#M000062">story (Spec::Story::Runner::StoryParser::State)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/HtmlFormatter.html#M000416">story_ended (Spec::Runner::Formatter::Story::HtmlFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/PlainTextFormatter.html#M000431">story_ended (Spec::Runner::Formatter::Story::PlainTextFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/ProgressBarFormatter.html#M000444">story_ended (Spec::Runner::Formatter::Story::ProgressBarFormatter)</a><br />
    <a href="classes/Spec/Runner/Options.html#M000541">story_formatters (Spec::Runner::Options)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/HtmlFormatter.html#M000415">story_started (Spec::Runner::Formatter::Story::HtmlFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/ProgressBarFormatter.html#M000443">story_started (Spec::Runner::Formatter::Story::ProgressBarFormatter)</a><br />
    <a href="classes/Spec/Runner/Formatter/Story/PlainTextFormatter.html#M000430">story_started (Spec::Runner::Formatter::Story::PlainTextFormatter)</a><br />
    <a href="classes/Spec/Mocks/ExampleMethods.html#M000205">stub (Spec::Mocks::ExampleMethods)</a><br />
    <a href="classes/Spec/Mocks/Methods.html#M000201">stub! (Spec::Mocks::Methods)</a><br />
    <a href="classes/Spec/Mocks/ExampleMethods.html#M000206">stub_everything (Spec::Mocks::ExampleMethods)</a><br />
    <a href="classes/Class.html#M000004">subclass (Class)</a><br />
    <a href="classes/Test/Unit/TestCase.html#M000628">suite (Test::Unit::TestCase)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000320">teardown (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Test/Unit/UI/Console/TestRunner.html#M000616">test_finished (Test::Unit::UI::Console::TestRunner)</a><br />
    <a href="classes/Test/Unit/UI/Console/TestRunner.html#M000615">test_finished_with_rspec (Test::Unit::UI::Console::TestRunner)</a><br />
    <a href="classes/Test/Unit/TestCase.html#M000630">test_method? (Test::Unit::TestCase)</a><br />
    <a href="classes/Test/Unit/UI/Console/TestRunner.html#M000614">test_started (Test::Unit::UI::Console::TestRunner)</a><br />
    <a href="classes/Test/Unit/UI/Console/TestRunner.html#M000613">test_started_with_rspec (Test::Unit::UI::Console::TestRunner)</a><br />
    <a href="classes/Spec/Runner/Heckler.html#M000559">tests_pass? (Spec::Runner::Heckler)</a><br />
    <a href="classes/Spec/Story/StepGroup.html#M000157">then (Spec::Story::StepGroup)</a><br />
    <a href="classes/Spec/Matchers.html#M000374">throw_symbol (Spec::Matchers)</a><br />
    <a href="classes/Spec/Mocks/MessageExpectation.html#M000239">times (Spec::Mocks::MessageExpectation)</a><br />
    <a href="classes/Spec/Story/Runner/StoryMediator/Scenario.html#M000108">to_proc (Spec::Story::Runner::StoryMediator::Scenario)</a><br />
    <a href="classes/Spec/Story/Runner/StoryMediator/Story.html#M000102">to_proc (Spec::Story::Runner::StoryMediator::Story)</a><br />
    <a href="classes/Spec/Story/Runner/StoryMediator/Step.html#M000106">to_proc (Spec::Story::Runner::StoryMediator::Step)</a><br />
    <a href="classes/Spec/Mocks/Mock.html#M000288">to_s (Spec::Mocks::Mock)</a><br />
    <a href="classes/Spec/Story/Runner/StoryParser.html#M000040">transition_to (Spec::Story::Runner::StoryParser)</a><br />
    <a href="classes/Spec/Runner/NoisyBacktraceTweaker.html#M000528">tweak_backtrace (Spec::Runner::NoisyBacktraceTweaker)</a><br />
    <a href="classes/Spec/Runner/QuietBacktraceTweaker.html#M000581">tweak_backtrace (Spec::Runner::QuietBacktraceTweaker)</a><br />
    <a href="classes/Spec/Mocks/MessageExpectation.html#M000243">twice (Spec::Mocks::MessageExpectation)</a><br />
    <a href="classes/Spec/Story/World.html#M000115">use (Spec::Story::World)</a><br />
    <a href="classes/Spec/Runner.html#M000410">use (Spec::Runner)</a><br />
    <a href="classes/Spec/Story/StepMother.html#M000141">use (Spec::Story::StepMother)</a><br />
    <a href="classes/Spec/Mocks/Space.html#M000275">verify_all (Spec::Mocks::Space)</a><br />
    <a href="classes/Spec/Runner/HeckleRunner.html#M000579">verify_constant (Spec::Runner::HeckleRunner)</a><br />
    <a href="classes/Spec/Mocks/MessageExpectation.html#M000226">verify_messages_received (Spec::Mocks::MessageExpectation)</a><br />
    <a href="classes/Spec/Example/ExampleMethods.html#M000330">violated (Spec::Example::ExampleMethods)</a><br />
    <a href="classes/Spec/Story/StepGroup.html#M000156">when (Spec::Story::StepGroup)</a><br />
    <a href="classes/Spec/Mocks/MessageExpectation.html#M000235">with (Spec::Mocks::MessageExpectation)</a><br />
    <a href="classes/Spec/Story/Extensions/Main.html#M000023">with_steps_for (Spec::Story::Extensions::Main)</a><br />
    <a href="classes/Spec/Runner/OptionParser.html#M000604">write_generated_options (Spec::Runner::OptionParser)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000305">xexample (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000306">xit (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Example/ExampleGroupMethods.html#M000307">xspecify (Spec::Example::ExampleGroupMethods)</a><br />
    <a href="classes/Spec/Runner/Formatter/BaseTextFormatter.html#M000507">yellow (Spec::Runner::Formatter::BaseTextFormatter)</a><br />
  </div>
</div>
</body>
</html>